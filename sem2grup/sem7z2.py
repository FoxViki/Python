# 1) Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет самую
# большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), 
# которая среди списка орбит планет найдет ту, по которой вращается 
# самая далекая планета. Круговые орбиты не учитывайте: вы знаете, 
# что у вашей звезды таких планет нет, зато искусственные спутники 
# были были запущены на круговые орбиты. Результатом функции должен 
# быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой 
# планеты. Каждая орбита представляет из себя кортеж из пары чисел - 
# полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, 
# где a и b - длины полуосей эллипса. При решении задачи используйте списочные 
# выражения. Подсказка: проще всего будет найти эллипс в два шага: сначала
# вычислить самую большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую  площадь. Гарантируется, что самая далекая планета ровно одна

# 2) - Дан список размеров(длина, ширина) эллипсов 
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# Напишите функцию find_farthest_orbit(list_of_orbits), которая находит площадь самого большого эллипса и возвращает кортеж с его размерами.
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b – длины и ширина осей эллипса
# -   Площадь кругов учитывать не нужно, т.е если у эллипса a == b, то это круг.
# При решении задачи используйте списочные выражения.
# Гарантируется, что самый большой эллипс всего один.

# def find_farthest_orbit(list_of_orbits):
#     max_s = 0
#     for a, b in list_of_orbits:
#         s = 3.14 * a * b
#         if a != b and s > max_s:
#             max_s = s
#             result = a, b
#     return result

def find_farthest_orbit(list_of_orbits):
    list_of_orbits = list(filter(lambda sizes: sizes[0] != sizes[1], list_of_orbits))
    list_max_areas = [3.14 * a * b for a, b in list_of_orbits]
    max_area = max(list_max_areas)
    i_max_area = list_max_areas.index(max_area)
    return list_of_orbits[i_max_area]
    # return [list_of_orbits[i] for i in range(len(list_of_orbits)) if list_max_areas[i] == max_area][0]

12:15
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

12:16












orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(data := list(filter(lambda x: x[0] != x[1], orbits)))
print(list := list(map(lambda x: x[0]*x[1]*3.14, data)))
print(orbits[list.index(max(list))])
orbits = [1, 2, 3, 4, 5, 6, 7, 89]
print(data := list(map(lambda x: x[0]*x[0], orbits)))

11:53
